name: CI/CD Pipeline

on:
  push:
    branches: [ pack-master, main, develop ]
  pull_request:
    branches: [ pack-master, main, develop ]
permissions:
  contents: read
  pull-requests: read
  checks: write
  statuses: write
  security-events: write  # Required for CodeQL

env:
  NODE_ENV: test
  CI: true
  NODE_VERSION_DEFAULT: '18'

jobs:
  # Security and dependency scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high --production

      - name: Run security scan with CodeQL
        uses: github/codeql-action/init@v3.27.0
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3.27.0

  # Linting and code quality
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check package.json format
        run: node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        continue-on-error: false

      - name: Validate template files
        shell: bash
        run: |
          echo "Validating template structure..."
          if [ ! -d "templates" ]; then
            echo "‚ùå Templates directory not found"
            exit 1
          fi

          for template in templates/*/; do
            if [ -d "$template" ]; then
              echo "‚úÖ Validating template: $(basename $template)"
              # Check for required files
              if [ ! -f "$template/Dockerfile" ]; then
                echo "‚ùå Missing Dockerfile in $template"
                exit 1
              fi
              if [ ! -f "$template/docker-compose.yml" ]; then
                echo "‚ùå Missing docker-compose.yml in $template"
                exit 1
              fi
              echo "‚úÖ Template $(basename $template) is valid"
            fi
          done

  # Matrix testing across Node.js versions
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [security, lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        include:
          - os: ubuntu-latest
            node-version: 18
            upload-coverage: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: node --experimental-vm-modules node_modules/jest/bin/jest.js --coverage --coverageReporters=text-lcov --coverageReporters=json

      - name: Test CLI functionality
        shell: bash
        run: |
          set -e  # Exit on any error to ensure tests actually fail
          echo "Testing CLI help command..."
          node figma-docker-init.js --help

          echo "Testing CLI version command..."
          node figma-docker-init.js --version

          echo "Testing CLI list templates..."
          node figma-docker-init.js --list
        continue-on-error: false

      - name: Upload coverage to Codecov
        if: matrix.upload-coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: ${{ secrets.CODECOV_TOKEN != '' }}

  # Build and package verification
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test package installation
        shell: bash
        run: |
          # Test global installation simulation
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          echo "Package created: $PACKAGE_FILE"

          # Verify package contents
          tar -tzf $PACKAGE_FILE | head -20

          # Test if package can be installed
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../$PACKAGE_FILE

          # Test if CLI is accessible
          npx figma-docker-init --help || echo "CLI test completed"
        continue-on-error: false

      - name: Verify template integrity
        shell: bash
        run: |
          echo "Verifying template file integrity..."

          for template_dir in templates/*/; do
            if [ -d "$template_dir" ]; then
              template_name=$(basename "$template_dir")
              echo "Checking template: $template_name"

              # Check Docker files are valid
              if [ -f "$template_dir/Dockerfile" ]; then
                echo "‚úÖ Dockerfile found for $template_name"
                # Basic Dockerfile syntax check
                if grep -q "FROM" "$template_dir/Dockerfile"; then
                  echo "‚úÖ Dockerfile has FROM instruction"
                else
                  echo "‚ùå Invalid Dockerfile in $template_name"
                  exit 1
                fi
              fi

              # Check docker-compose.yml is valid YAML
              if [ -f "$template_dir/docker-compose.yml" ]; then
                echo "‚úÖ docker-compose.yml found for $template_name"
                # Install jq for YAML validation if not present
                if command -v jq >/dev/null 2>&1; then
                  # Use jq to validate YAML structure (jq can parse YAML)
                  if jq -e . "$template_dir/docker-compose.yml" >/dev/null 2>&1; then
                    echo "‚úÖ docker-compose.yml is valid YAML"
                  else
                    echo "‚ùå Invalid YAML in docker-compose.yml for $template_name"
                    exit 1
                  fi
                else
                  echo "‚ö†Ô∏è YAML validation skipped (jq not available)"
                fi
              fi

              echo "‚úÖ Template $template_name verified"
            fi
          done
        continue-on-error: false

  # Semantic Release (only on pack-master branch)
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/pack-master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify semantic-release script exists
        shell: bash
        run: |
          if ! npm run | grep -q "semantic-release"; then
            echo "‚ùå semantic-release script not found in package.json"
            exit 1
          fi
          echo "‚úÖ semantic-release script found"
        continue-on-error: false

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run semantic-release
        continue-on-error: false

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            *.tgz  # semantic-release creates tarball in root directory
          retention-days: 30
          if-no-files-found: error
          compression-level: 6

  # Notification and status reporting
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [security, lint, test, build, release]
    if: always()
    steps:
      - name: Report Pipeline Status
        shell: bash
        run: |
          echo "=== CI/CD Pipeline Status Report ==="
          echo "Security Scan: ${{ needs.security.result }}"
          echo "Lint & Code Quality: ${{ needs.lint.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build & Package: ${{ needs.build.result }}"
          echo ""

          # Evaluate each job result separately in bash (GitHub expressions don't work in [[ ]])
          SECURITY_SUCCESS=$([ "${{ needs.security.result }}" = "success" ] && echo true || echo false)
          LINT_SUCCESS=$([ "${{ needs.lint.result }}" = "success" ] && echo true || echo false)
          TEST_SUCCESS=$([ "${{ needs.test.result }}" = "success" ] && echo true || echo false)
          BUILD_SUCCESS=$([ "${{ needs.build.result }}" = "success" ] && echo true || echo false)

          if [[ "$SECURITY_SUCCESS" == "true" &&
                "$LINT_SUCCESS" == "true" &&
                "$TEST_SUCCESS" == "true" &&
                "$BUILD_SUCCESS" == "true" ]]; then
            echo "üéâ All pipeline stages completed successfully!"
            echo "Package is ready for deployment."
          else
            echo "‚ùå Pipeline completed with failures."
            echo "Please review the failed stages before proceeding."
          fi
        continue-on-error: false